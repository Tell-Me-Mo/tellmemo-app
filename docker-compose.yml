services:
  # PostgreSQL 17.6 - Main database for project metadata
  postgres:
    image: postgres:17.6
    container_name: tellmemo_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pm_master}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pm_master_pass}
      POSTGRES_DB: ${POSTGRES_DB:-pm_master_db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pm_master} -d ${POSTGRES_DB:-pm_master_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pm_network

  # Qdrant v1.15.3 - Vector database for semantic search
  qdrant:
    image: qdrant/qdrant:v1.15.4
    container_name: tellmemo_qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
      QDRANT__STORAGE__SNAPSHOTS_PATH: /qdrant/snapshots
      QDRANT__TELEMETRY_DISABLED: true
      QDRANT__SERVICE__ENABLE_TLS: false
      # Optimize for accuracy - using higher memory threshold
      QDRANT__STORAGE__OPTIMIZERS__MEMMAP_THRESHOLD: 50000
    ports:
      - "6333:6333"  # HTTP API & Web UI
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
      - qdrant_snapshots:/qdrant/snapshots
    healthcheck:
      test: ["CMD-SHELL", "test -f /proc/1/cmdline || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - pm_network

  # Redis 7 - Required for Langfuse v3 queue and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: tellmemo_redis
    restart: unless-stopped
    profiles:
      - langfuse
    command: >
      --requirepass ${REDIS_PASSWORD:-redispassword123}
      --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispassword123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pm_network

  # MinIO - S3-compatible storage for Langfuse v3 (optional)
  minio:
    image: minio/minio:latest
    container_name: tellmemo_minio
    restart: unless-stopped
    profiles:
      - langfuse
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pm_network

  # Zookeeper - Required for ClickHouse clustering (optional - only for Langfuse)
  zookeeper:
    image: zookeeper:3.9
    container_name: tellmemo_zookeeper
    restart: unless-stopped
    profiles:
      - langfuse
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: mntr,conf,ruok
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/data
      - zookeeper_logs:/datalog
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pm_network

  # ClickHouse - Required for Langfuse v3 analytics (with clustering support) (optional)
  clickhouse:
    image: clickhouse/clickhouse-server:24.3-alpine
    container_name: tellmemo_clickhouse
    restart: unless-stopped
    profiles:
      - langfuse
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhousepass123}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"  # HTTP interface
      - "9009:9000"  # Native protocol (changed from 9000 to avoid conflict)
      - "9010:9009"  # Interserver HTTP port
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./backend/clickhouse/config.xml:/etc/clickhouse-server/config.d/config.xml:ro
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --password ${CLICKHOUSE_PASSWORD:-clickhousepass123} --query 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - pm_network

  # Langfuse v3 Worker - Background processing (optional)
  langfuse-worker:
    image: langfuse/langfuse-worker:latest
    container_name: tellmemo_langfuse_worker
    restart: unless-stopped
    profiles:
      - langfuse
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-pm_master}:${POSTGRES_PASSWORD:-pm_master_pass}@postgres:5432/${LANGFUSE_DB:-langfuse_db}
      
      # Security
      SALT: ${LANGFUSE_SALT:-your-salt-at-least-32-chars-long-change-in-production}
      ENCRYPTION_KEY: ${LANGFUSE_ENCRYPTION_KEY:-0000000000000000000000000000000000000000000000000000000000000000}
      
      # ClickHouse
      CLICKHOUSE_URL: http://default:${CLICKHOUSE_PASSWORD:-clickhousepass123}@clickhouse:8123
      CLICKHOUSE_MIGRATION_URL: clickhouse://default:${CLICKHOUSE_PASSWORD:-clickhousepass123}@clickhouse:9000
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhousepass123}
      
      # Redis
      REDIS_CONNECTION_STRING: redis://:${REDIS_PASSWORD:-redispassword123}@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_AUTH: ${REDIS_PASSWORD:-redispassword123}
      
      # MinIO/S3
      LANGFUSE_S3_EVENT_UPLOAD_ENABLED: true
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: true
      
      LANGFUSE_S3_MEDIA_UPLOAD_ENABLED: true
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse-media
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: true
    networks:
      - pm_network

  # Langfuse v3 Web - Main application (optional)
  langfuse-web:
    image: langfuse/langfuse:latest
    container_name: tellmemo_langfuse
    restart: unless-stopped
    profiles:
      - langfuse
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      langfuse-worker:
        condition: service_started
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-pm_master}:${POSTGRES_PASSWORD:-pm_master_pass}@postgres:5432/${LANGFUSE_DB:-langfuse_db}
      
      # Auth & Security
      NEXTAUTH_URL: ${LANGFUSE_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${LANGFUSE_SECRET:-your-secret-key-at-least-32-chars-long-change-in-production}
      SALT: ${LANGFUSE_SALT:-your-salt-at-least-32-chars-long-change-in-production}
      ENCRYPTION_KEY: ${LANGFUSE_ENCRYPTION_KEY:-0000000000000000000000000000000000000000000000000000000000000000}
      
      # ClickHouse
      CLICKHOUSE_URL: http://default:${CLICKHOUSE_PASSWORD:-clickhousepass123}@clickhouse:8123
      CLICKHOUSE_MIGRATION_URL: clickhouse://default:${CLICKHOUSE_PASSWORD:-clickhousepass123}@clickhouse:9000
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhousepass123}
      
      # Redis
      REDIS_CONNECTION_STRING: redis://:${REDIS_PASSWORD:-redispassword123}@redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_AUTH: ${REDIS_PASSWORD:-redispassword123}
      
      # MinIO/S3
      LANGFUSE_S3_EVENT_UPLOAD_ENABLED: true
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: true
      
      LANGFUSE_S3_MEDIA_UPLOAD_ENABLED: true
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse-media
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: us-east-1
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: true
      
      # Features
      TELEMETRY_ENABLED: ${LANGFUSE_TELEMETRY:-false}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: true
      NODE_ENV: ${NODE_ENV:-development}
      
      # Auth settings
      AUTH_DISABLE_LOGIN: ${LANGFUSE_AUTH_DISABLE:-false}
      AUTH_DISABLE_SIGNUP: ${LANGFUSE_AUTH_DISABLE_SIGNUP:-false}
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "test -f /proc/1/cmdline || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - pm_network

  # ===== APPLICATION SERVICES =====
  # Backend - FastAPI application
  backend:
    image: nkondratyk93/tellmemo-backend:latest
    container_name: tellmemo_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-pm_master}:${POSTGRES_PASSWORD:-pm_master_pass}@postgres:5432/${POSTGRES_DB:-pm_master_db}

      # Qdrant
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword123}

      # Langfuse (only if enabled)
      LANGFUSE_ENABLED: ${LANGFUSE_ENABLED:-false}
      LANGFUSE_HOST: http://langfuse-web:3000
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY:-}

      # Supabase
      SUPABASE_URL: ${SUPABASE_URL:-}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-}

      # Anthropic
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}

      # Hugging Face
      HF_TOKEN: ${HF_TOKEN}

      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:80,http://localhost:3001,http://frontend}
    ports:
      - "8000:8000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - pm_network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import httpx; httpx.get(\"http://localhost:8000/health\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Frontend - Flutter Web application
  # Note: Frontend config is injected at runtime via entrypoint script
  frontend:
    image: nkondratyk93/tellmemo-frontend:latest
    container_name: tellmemo_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      # Runtime configuration (injected into JavaScript at startup)
      SUPABASE_URL: ${SUPABASE_URL:-}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-}
      API_BASE_URL: ${FRONTEND_URL:-http://localhost:8100}

      # Optional: Analytics & Error Tracking
      FLUTTER_SENTRY_ENABLED: ${FLUTTER_SENTRY_ENABLED:-false}
      FLUTTER_SENTRY_DSN: ${FLUTTER_SENTRY_DSN:-}
      FLUTTER_FIREBASE_ANALYTICS_ENABLED: ${FLUTTER_FIREBASE_ANALYTICS_ENABLED:-false}
    ports:
      - "80:80"
    networks:
      - pm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

networks:
  pm_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  qdrant_snapshots:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  clickhouse_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  # Application volumes
  backend_uploads:
    driver: local
  backend_logs:
    driver: local