services:
  # PostgreSQL 18.0 - Main database for project metadata
  postgres:
    image: postgres:18.0
    container_name: tellmemo_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pm_master}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pm_master_pass}
      POSTGRES_DB: ${POSTGRES_DB:-pm_master_db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pm_master} -d ${POSTGRES_DB:-pm_master_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pm_network

  # Qdrant v1.15.5 - Vector database for semantic search
  qdrant:
    image: qdrant/qdrant:v1.15.5
    container_name: tellmemo_qdrant
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
      QDRANT__STORAGE__SNAPSHOTS_PATH: /qdrant/snapshots
      QDRANT__TELEMETRY_DISABLED: true
      QDRANT__SERVICE__ENABLE_TLS: false
      # Optimize for accuracy - using higher memory threshold
      QDRANT__STORAGE__OPTIMIZERS__MEMMAP_THRESHOLD: 50000
    ports:
      - "6333:6333"  # HTTP API & Web UI
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
      - qdrant_snapshots:/qdrant/snapshots
    healthcheck:
      test: ["CMD-SHELL", "test -f /proc/1/cmdline || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - pm_network

  # ===== APPLICATION SERVICES =====
  # Backend - FastAPI application
  backend:
    image: nkondratyk93/tellmemo-backend:latest
    container_name: tellmemo_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-pm_master}:${POSTGRES_PASSWORD:-pm_master_pass}@postgres:5432/${POSTGRES_DB:-pm_master_db}
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER:-pm_master}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pm_master_pass}
      POSTGRES_DB: ${POSTGRES_DB:-pm_master_db}
      POSTGRES_PORT: 5432

      # Qdrant
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword123}

      # Langfuse (only if enabled)
      LANGFUSE_ENABLED: ${LANGFUSE_ENABLED:-false}
      LANGFUSE_HOST: http://langfuse-web:3000
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_PUBLIC_KEY:-}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_SECRET_KEY:-}

      # Supabase
      SUPABASE_URL: ${SUPABASE_URL:-}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-}

      # Anthropic
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}

      # Hugging Face
      HF_TOKEN: ${HF_TOKEN}

      # Application
      API_ENV: ${API_ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:80,http://localhost:3001,http://frontend}
    ports:
      - "8000:8000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - pm_network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import httpx; httpx.get(\"http://localhost:8000/health\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  # Frontend - Flutter Web application
  # Note: Configuration is baked into the image from lib/config.dart
  frontend:
    image: nkondratyk93/tellmemo-frontend:latest
    container_name: tellmemo_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8100:80"
    networks:
      - pm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

networks:
  pm_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  qdrant_snapshots:
    driver: local
  # Application volumes
  backend_uploads:
    driver: local
  backend_logs:
    driver: local