// Mocks generated by Mockito 5.4.6 from annotations
// in pm_master_v2/test/features/projects/presentation/providers/projects_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pm_master_v2/features/projects/domain/entities/project.dart'
    as _i2;
import 'package:pm_master_v2/features/projects/domain/repositories/projects_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProject_0 extends _i1.SmartFake implements _i2.Project {
  _FakeProject_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProjectsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsRepository extends _i1.Mock
    implements _i3.ProjectsRepository {
  MockProjectsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Project>> getProjects() =>
      (super.noSuchMethod(
            Invocation.method(#getProjects, []),
            returnValue: _i4.Future<List<_i2.Project>>.value(<_i2.Project>[]),
          )
          as _i4.Future<List<_i2.Project>>);

  @override
  _i4.Future<_i2.Project> getProject(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getProject, [id]),
            returnValue: _i4.Future<_i2.Project>.value(
              _FakeProject_0(this, Invocation.method(#getProject, [id])),
            ),
          )
          as _i4.Future<_i2.Project>);

  @override
  _i4.Future<_i2.Project> createProject({
    required String? name,
    required String? description,
    required String? createdBy,
    String? portfolioId,
    String? programId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createProject, [], {
              #name: name,
              #description: description,
              #createdBy: createdBy,
              #portfolioId: portfolioId,
              #programId: programId,
            }),
            returnValue: _i4.Future<_i2.Project>.value(
              _FakeProject_0(
                this,
                Invocation.method(#createProject, [], {
                  #name: name,
                  #description: description,
                  #createdBy: createdBy,
                  #portfolioId: portfolioId,
                  #programId: programId,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Project>);

  @override
  _i4.Future<_i2.Project> updateProject(
    String? id,
    Map<String, dynamic>? updates,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateProject, [id, updates]),
            returnValue: _i4.Future<_i2.Project>.value(
              _FakeProject_0(
                this,
                Invocation.method(#updateProject, [id, updates]),
              ),
            ),
          )
          as _i4.Future<_i2.Project>);

  @override
  _i4.Future<void> archiveProject(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#archiveProject, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> restoreProject(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#restoreProject, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteProject(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProject, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
