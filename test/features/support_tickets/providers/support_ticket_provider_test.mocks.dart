// Mocks generated by Mockito 5.4.6 from annotations
// in pm_master_v2/test/features/support_tickets/providers/support_ticket_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pm_master_v2/features/support_tickets/models/support_ticket.dart'
    as _i2;
import 'package:pm_master_v2/features/support_tickets/services/support_ticket_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupportTicket_0 extends _i1.SmartFake implements _i2.SupportTicket {
  _FakeSupportTicket_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTicketComment_1 extends _i1.SmartFake implements _i2.TicketComment {
  _FakeTicketComment_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SupportTicketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupportTicketService extends _i1.Mock
    implements _i3.SupportTicketService {
  MockSupportTicketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.SupportTicket> createTicket({
    required String? title,
    required String? description,
    required _i2.TicketType? type,
    required _i2.TicketPriority? priority,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createTicket, [], {
              #title: title,
              #description: description,
              #type: type,
              #priority: priority,
            }),
            returnValue: _i4.Future<_i2.SupportTicket>.value(
              _FakeSupportTicket_0(
                this,
                Invocation.method(#createTicket, [], {
                  #title: title,
                  #description: description,
                  #type: type,
                  #priority: priority,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.SupportTicket>);

  @override
  _i4.Future<List<_i2.SupportTicket>> getTickets({
    _i2.TicketStatus? status,
    _i2.TicketPriority? priority,
    _i2.TicketType? type,
    bool? assignedToMe = false,
    bool? createdByMe = false,
    String? sortBy = 'created_at',
    String? sortOrder = 'desc',
    int? limit = 50,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTickets, [], {
              #status: status,
              #priority: priority,
              #type: type,
              #assignedToMe: assignedToMe,
              #createdByMe: createdByMe,
              #sortBy: sortBy,
              #sortOrder: sortOrder,
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i4.Future<List<_i2.SupportTicket>>.value(
              <_i2.SupportTicket>[],
            ),
          )
          as _i4.Future<List<_i2.SupportTicket>>);

  @override
  _i4.Future<_i2.SupportTicket> getTicket(String? ticketId) =>
      (super.noSuchMethod(
            Invocation.method(#getTicket, [ticketId]),
            returnValue: _i4.Future<_i2.SupportTicket>.value(
              _FakeSupportTicket_0(
                this,
                Invocation.method(#getTicket, [ticketId]),
              ),
            ),
          )
          as _i4.Future<_i2.SupportTicket>);

  @override
  _i4.Future<_i2.SupportTicket> updateTicket(
    String? ticketId, {
    String? title,
    String? description,
    _i2.TicketType? type,
    _i2.TicketPriority? priority,
    _i2.TicketStatus? status,
    String? assignedTo,
    String? resolutionNotes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateTicket,
              [ticketId],
              {
                #title: title,
                #description: description,
                #type: type,
                #priority: priority,
                #status: status,
                #assignedTo: assignedTo,
                #resolutionNotes: resolutionNotes,
              },
            ),
            returnValue: _i4.Future<_i2.SupportTicket>.value(
              _FakeSupportTicket_0(
                this,
                Invocation.method(
                  #updateTicket,
                  [ticketId],
                  {
                    #title: title,
                    #description: description,
                    #type: type,
                    #priority: priority,
                    #status: status,
                    #assignedTo: assignedTo,
                    #resolutionNotes: resolutionNotes,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i2.SupportTicket>);

  @override
  _i4.Future<_i2.TicketComment> addComment(
    String? ticketId, {
    required String? comment,
    bool? isInternal = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addComment,
              [ticketId],
              {#comment: comment, #isInternal: isInternal},
            ),
            returnValue: _i4.Future<_i2.TicketComment>.value(
              _FakeTicketComment_1(
                this,
                Invocation.method(
                  #addComment,
                  [ticketId],
                  {#comment: comment, #isInternal: isInternal},
                ),
              ),
            ),
          )
          as _i4.Future<_i2.TicketComment>);

  @override
  _i4.Future<List<_i2.TicketComment>> getComments(
    String? ticketId, {
    bool? includeInternal = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getComments,
              [ticketId],
              {#includeInternal: includeInternal},
            ),
            returnValue: _i4.Future<List<_i2.TicketComment>>.value(
              <_i2.TicketComment>[],
            ),
          )
          as _i4.Future<List<_i2.TicketComment>>);

  @override
  _i4.Future<void> deleteTicket(String? ticketId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTicket, [ticketId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>> uploadAttachment(
    String? ticketId, {
    String? filePath,
    List<int>? fileBytes,
    required String? fileName,
    String? commentId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #uploadAttachment,
              [ticketId],
              {
                #filePath: filePath,
                #fileBytes: fileBytes,
                #fileName: fileName,
                #commentId: commentId,
              },
            ),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<void> downloadAttachment(
    String? ticketId,
    String? attachmentId,
    String? savePath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#downloadAttachment, [
              ticketId,
              attachmentId,
              savePath,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
